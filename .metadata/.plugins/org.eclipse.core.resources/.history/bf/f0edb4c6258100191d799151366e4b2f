package fr.upmc.pstl.exemples.basic.components;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import fr.sorbonne_u.components.annotations.OfferedInterfaces;
import fr.sorbonne_u.components.exceptions.ComponentStartException;
import fr.upmc.pstl.AbstractComponentRT;
import fr.upmc.pstl.TaskCommand;
import fr.upmc.pstl.ICommand;
import fr.upmc.pstl.Tasks.Provide;
import fr.upmc.pstl.annotations.CyclePeriod;
import fr.upmc.pstl.exemples.basic.interfaces.ProviderI;
import fr.upmc.pstl.exemples.basic.ports.ProviderInboundPort;

@CyclePeriod(period = 15)
@OfferedInterfaces(offered = {ProviderI.class})
public class Provider 
extends AbstractComponentRT 
implements ProviderI{
	
	
	protected ProviderInboundPort uriGetterPort;

	public Provider(
			String uri, 
			String providerportURI, 
			Map<String,Object> vars, 
			List<TaskCommand> tasks) throws Exception
	{
		super(uri,vars);
		
		
		this.uriGetterPort = new ProviderInboundPort(providerportURI, this);
		
		this.addPort(this.uriGetterPort);
		
		this.uriGetterPort.publishPort();
	}

	@Override
	public void provide(Object[] params, CompletableFuture<Object> cf) {
		ICommand task = new Provide(this, params, cf);
		this.addCall(task);
	}

	
	
	public void start() throws ComponentStartException {
		super.start();
	}
	
	public void schedul() {
        super.scheduler_multi_thread(this);
	}
}
