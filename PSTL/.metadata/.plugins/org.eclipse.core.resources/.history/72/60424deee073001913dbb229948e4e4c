package fr.upmc.pstl;


import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import fr.upmc.components.AbstractComponent;
import fr.upmc.components.annotations.OfferedInterfaces;
import fr.upmc.components.interfaces.OfferedI;
import fr.upmc.pstl.annotations.AccessType;
import fr.upmc.pstl.annotations.AccessedVars;
import fr.upmc.pstl.annotations.CyclePeriod;
import fr.upmc.pstl.annotations.TaskAnnotation;
import fr.upmc.pstl.exceptions.CircularityException;
import fr.upmc.pstl.exceptions.PrecedanceException;
import fr.upmc.pstl.exceptions.TimeException;

@CyclePeriod(period = 10)
public abstract class AbstractComponentRT extends AbstractComponent
{
	protected Map<String , Object> vars;
	protected List<AbstractTask> tasks;
	protected List<AbstractTask> to_execute; 
	
	public AbstractComponentRT(String uri, Map<String , Object> vars, List<AbstractTask> tasks) {
		super(uri,1,0);
		this.vars = vars;
		this.tasks = tasks;
		this.to_execute = new ArrayList<AbstractTask>();
	}
	
	public Map<String,Object> getVars(){
		return this.vars;
	}
	
	public void setVar(String varName, Object newVal){
		this.vars.put(varName, newVal);
	}
	
	public void addCall(ITask task) {
		this.to_execute.add((AbstractTask) task);
	}
	
	protected AbstractTask getLastTask() {
		AbstractTask curr = this.to_execute.get(0);
		this.to_execute.remove(0);
		return curr;
	}
	

	protected final List<AbstractTask> scheduler (AbstractComponentRT r) {
		try {
			// looking for "taches liée à la sémantique"
			List<AbstractTask> task_semantique_ect = new ArrayList<>();
			List<Method> offeredMethod = AbstractComponentRT.getAllOfferedMethods(r);
			System.out.println("Size : "+ offeredMethod.size());
			long longer_time_offered_methods = 0;
			for (AbstractTask t : r.tasks) {
//				if(offeredMethod.contains())
				System.out.println("Name of : "+t.getClass());
				if (AbstractComponentRT.isSemantique (t.getClass().getName(), offeredMethod)){
					System.out.println("sematic method "+t.getClass().getName());
					task_semantique_ect.add(t);
				}else {
					long et = ((TaskAnnotation) t.getClass().getAnnotation(TaskAnnotation.class)).wcet();
					if (et > longer_time_offered_methods) {
						longer_time_offered_methods = et;
					}
				}
			}
			System.out.println("size of tsect "+task_semantique_ect.size());
			for (AbstractTask t : task_semantique_ect) {
				System.out.println(t.getClass().getName());
			}
			
			// cas triviaux d'exception
			long totalTime = 0;
			Map<String, Map<ITask, AccessType>> variables = new HashMap<>();
			Map<String, AccessType> variablesAccessType = new HashMap<>();
			for (ITask task : task_semantique_ect) {
				TaskAnnotation annotation = (TaskAnnotation) task.getClass().getAnnotation(TaskAnnotation.class); 
				AccessedVars annotationAccess = (AccessedVars) task.getClass().getAnnotation(AccessedVars.class);
				for (int i = 0 ; i < annotationAccess.vars().length ; i ++) {
					if (!variables.containsKey(annotationAccess.vars()[i]))
						variables.put(annotationAccess.vars()[i], new HashMap<>());
					if (!variablesAccessType.containsKey(annotationAccess.vars()[i]))
						variablesAccessType.put(annotationAccess.vars()[i], annotationAccess.accessType()[i]);
					
					variables.get(annotationAccess.vars()[i]).put(task, annotationAccess.accessType()[i]);	
					
					if (variablesAccessType.get(annotationAccess.vars()[i]) != annotationAccess.accessType()[i])
						variablesAccessType.put(annotationAccess.vars()[i], AccessType.BOTH);
				}
				totalTime += annotation.wcet();
				if (annotation.timeLimit() < annotation.wcet())
					throw new TimeException("impossible de satisfy "+TaskAnnotation.class+" deadLine");	
			}
			
			if ((totalTime+longer_time_offered_methods) > r.getClass().getAnnotation(CyclePeriod.class).period())
				throw new TimeException("period exceeded");
			
			long remined_time = r.getClass().getAnnotation(CyclePeriod.class).period() - totalTime;
			int nb_ect = 0;
			if(longer_time_offered_methods!=0)
				nb_ect =(int) (remined_time / (longer_time_offered_methods));
			for( int i = 0 ; i < nb_ect ; i ++) {
				task_semantique_ect.add(new ExecuteCallTask(r));
			}
			
			
		
			for (String key : variablesAccessType.keySet()) {
				if ( variablesAccessType.get(key) == AccessType.READ )
					throw new PrecedanceException("trying to read unwritten variable "+key);
			}
			
			// test circularité
			for ( String s1 : variables.keySet()) {
				for (String s2 : variables.keySet()) {
					if ( ! s2.equals(s1)) {
						for (ITask t1 : variables.get(s1).keySet()) {
							for (ITask t2 : variables.get(s2).keySet()) {
								if ((! t1.equals(t2)) && variables.get(s2).keySet().contains(t1) && variables.get(s1).keySet().contains(t2)) {
									if (variables.get(s1).get(t1) == AccessType.READ && variables.get(s2).get(t1) == AccessType.WRITE
											&& variables.get(s1).get(t2) == AccessType.WRITE && variables.get(s2).get(t2) == AccessType.READ
											)
										throw new CircularityException("the task "+t1+" read "+s2+" and write "+s1+" and the task "+t2+" does the symestrique operation");
									
									if (variables.get(s1).get(t1) == AccessType.WRITE && variables.get(s2).get(t1) == AccessType.READ
											&& variables.get(s1).get(t2) == AccessType.READ && variables.get(s2).get(t2) == AccessType.WRITE
											)
										throw new CircularityException("the task "+t2+" read "+s1+" and write "+s2+" and the task "+t1+" does the symestrique operation");	
								}
							}
						}
					}
				}
			}
			//calcul de l'ordonnanceur
			
			// placer dans la liste des tasks un ordre (une initilisation) ex : (le temps de terminaison croissant)
			// utiliser peut être une relation d'ordre partiel -tri topologique-
			task_semantique_ect.sort(new TaskComparator());
			List<AbstractTask> ord = this.sched(task_semantique_ect , new ArrayList<AbstractTask> ());
			for(AbstractTask t : ord) {
				System.out.println(t.getClass());
			}
			return ord;
		} catch (TimeException | PrecedanceException | CircularityException | SchedulingException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * reorganiser selon les deadline les plus proche
	 */
	protected final List<AbstractTask> reorderList (List<AbstractTask> list){
		
		return null;
	}
	
	protected final List<AbstractTask> sched (List<AbstractTask> l, List<AbstractTask> ord) throws SchedulingException{
		if (l.size() == 0) {
			return ord;
		}
		List<AbstractTask> l2 = (List<AbstractTask>) ((ArrayList<AbstractTask>) l).clone();
		for (AbstractTask i : l) {
			ord.add(i);
			l2.remove(i);
			if (AbstractComponentRT.checkPossibility(ord)) {
				
				ord = this.sched(l2, ord);
				return ord;
			}
			l2.add(i);
			ord.remove(i);
		}
		return ord;
	}
	
	
	// il faut comparer chaque élèment avec tout ceux qui le suivent
	protected static boolean  checkPossibility (List<AbstractTask> list) {
		TaskComparator tc = new TaskComparator();
		for (int i = 0 ;i < list.size()-1 ; i ++) {
			if (tc.compare(list.get(i), list.get(i+1)) <=0)
				continue;
			return false;
		}
		return true;
	}
	
	
	protected static boolean isSemantique (String string , List<Method> methodes) {
		for (Method m : methodes ) {
			System.out.println(m.getName()+" "+string);
			if ((string.toLowerCase()).equals(m.getName().toLowerCase())) {
				System.out.println("is not semantic"+string);
				return false;
			}
		}
		return true;
	}
	
	protected static List<Method> getAllOfferedMethods (AbstractComponentRT component) {
		List<Method> methods = new ArrayList<>();
		OfferedInterfaces offredInterface = component.getClass().getAnnotation(OfferedInterfaces.class);
		if (offredInterface != null) {
		Class< ? extends OfferedI>[] offeredMethod = offredInterface.offered();
			for (Class< ? extends OfferedI> oi : offeredMethod ) {
				System.out.println(oi.getClass());
				for (Method m : oi.getDeclaredMethods()) {
//					System.out.println("\t"+m.getName());
					methods.add(m);
				}
			}
		}
		return methods;
	}
	
}
