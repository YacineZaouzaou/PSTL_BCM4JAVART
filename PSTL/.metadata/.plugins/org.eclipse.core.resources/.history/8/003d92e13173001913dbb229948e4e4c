package fr.upmc.pstl.exemples.basic.components;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import fr.upmc.components.annotations.OfferedInterfaces;
import fr.upmc.pstl.AbstractComponentRT;
import fr.upmc.pstl.AbstractTask;
import fr.upmc.pstl.ITask;
import fr.upmc.pstl.Tasks.Provide;
import fr.upmc.pstl.exemples.basic.interfaces.ProviderI;

@OfferedInterfaces(offered = {ProviderI.class})
public class Provider extends AbstractComponentRT implements ProviderI{

	public Provider(String uri, String providerportURI, Map<String,Object> vars, List<AbstractTask> tasks) {
		super(uri,vars, tasks);
		super.scheduler(this);
	}

	@Override
	public void provide(Object[] params, CompletableFuture<Object> cf) {
		ITask task = new Provide(this, params, cf);
		this.addCall(task);
	}
}
